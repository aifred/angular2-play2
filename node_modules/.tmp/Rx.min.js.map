{"version":3,"sources":["../rxjs/src/observable/BoundCallbackObservable.ts","../rxjs/src/observable/bindCallback.ts","../rxjs/src/add/observable/bindCallback.ts","../rxjs/src/observable/BoundNodeCallbackObservable.ts","../rxjs/src/observable/bindNodeCallback.ts","../rxjs/src/add/observable/bindNodeCallback.ts","../rxjs/src/observable/combineLatest.ts","../rxjs/src/add/observable/combineLatest.ts","../rxjs/src/observable/concat.ts","../rxjs/src/add/observable/concat.ts","../rxjs/src/observable/DeferObservable.ts","../rxjs/src/observable/defer.ts","../rxjs/src/add/observable/defer.ts","../rxjs/src/observable/empty.ts","../rxjs/src/add/observable/empty.ts","../rxjs/src/observable/ForkJoinObservable.ts","../rxjs/src/observable/forkJoin.ts","../rxjs/src/add/observable/forkJoin.ts","../rxjs/src/observable/from.ts","../rxjs/src/add/observable/from.ts","../rxjs/src/observable/FromEventObservable.ts","../rxjs/src/observable/fromEvent.ts","../rxjs/src/add/observable/fromEvent.ts","../rxjs/src/observable/FromEventPatternObservable.ts","../rxjs/src/observable/fromEventPattern.ts","../rxjs/src/add/observable/fromEventPattern.ts","../rxjs/src/observable/fromPromise.ts","../rxjs/src/add/observable/fromPromise.ts","../rxjs/src/observable/GenerateObservable.ts","../rxjs/src/add/observable/generate.ts","../rxjs/src/observable/IfObservable.ts","../rxjs/src/observable/if.ts","../rxjs/src/add/observable/if.ts","../rxjs/src/observable/IntervalObservable.ts","../rxjs/src/observable/interval.ts","../rxjs/src/add/observable/interval.ts","../rxjs/src/observable/merge.ts","../rxjs/src/add/observable/merge.ts","../rxjs/src/add/observable/race.ts","../rxjs/src/observable/NeverObservable.ts","../rxjs/src/observable/never.ts","../rxjs/src/add/observable/never.ts","../rxjs/src/observable/of.ts","../rxjs/src/add/observable/of.ts","../rxjs/src/add/observable/onErrorResumeNext.ts","../rxjs/src/observable/PairsObservable.ts","../rxjs/src/observable/pairs.ts","../rxjs/src/add/observable/pairs.ts","../rxjs/src/observable/RangeObservable.ts","../rxjs/src/observable/range.ts","../rxjs/src/add/observable/range.ts","../rxjs/src/observable/UsingObservable.ts","../rxjs/src/observable/using.ts","../rxjs/src/add/observable/using.ts","../rxjs/src/observable/ErrorObservable.ts","../rxjs/src/observable/throw.ts","../rxjs/src/add/observable/throw.ts","../rxjs/src/observable/TimerObservable.ts","../rxjs/src/observable/timer.ts","../rxjs/src/add/observable/timer.ts","../rxjs/src/observable/zip.ts","../rxjs/src/add/observable/zip.ts","../rxjs/src/observable/dom/ajax.ts","../rxjs/src/add/observable/dom/ajax.ts","../rxjs/src/util/assign.ts","../rxjs/src/observable/dom/WebSocketSubject.ts","../rxjs/src/observable/dom/webSocket.ts","../rxjs/src/add/observable/dom/webSocket.ts","../rxjs/src/operator/buffer.ts","../rxjs/src/add/operator/buffer.ts","../rxjs/src/operator/bufferCount.ts","../rxjs/src/add/operator/bufferCount.ts","../rxjs/src/operator/bufferTime.ts","../rxjs/src/add/operator/bufferTime.ts","../rxjs/src/operator/bufferToggle.ts","../rxjs/src/add/operator/bufferToggle.ts","../rxjs/src/operator/bufferWhen.ts","../rxjs/src/add/operator/bufferWhen.ts","../rxjs/src/operator/catch.ts","../rxjs/src/add/operator/catch.ts","../rxjs/src/operator/combineAll.ts","../rxjs/src/add/operator/combineAll.ts","../rxjs/src/operator/combineLatest.ts","../rxjs/src/add/operator/combineLatest.ts","../rxjs/src/add/operator/concat.ts","../rxjs/src/operator/concatAll.ts","../rxjs/src/add/operator/concatAll.ts","../rxjs/src/operator/concatMap.ts","../rxjs/src/add/operator/concatMap.ts","../rxjs/src/operator/concatMapTo.ts","../rxjs/src/add/operator/concatMapTo.ts","../rxjs/src/operator/count.ts","../rxjs/src/add/operator/count.ts","../rxjs/src/operator/dematerialize.ts","../rxjs/src/add/operator/dematerialize.ts","../rxjs/src/operator/debounce.ts","../rxjs/src/add/operator/debounce.ts","../rxjs/src/operator/debounceTime.ts","../rxjs/src/add/operator/debounceTime.ts","../rxjs/src/operator/defaultIfEmpty.ts","../rxjs/src/add/operator/defaultIfEmpty.ts","../rxjs/src/operator/delay.ts","../rxjs/src/add/operator/delay.ts","../rxjs/src/operator/delayWhen.ts","../rxjs/src/add/operator/delayWhen.ts","../rxjs/src/util/Set.ts","../rxjs/src/operator/distinct.ts","../rxjs/src/add/operator/distinct.ts","../rxjs/src/add/operator/distinctUntilChanged.ts","../rxjs/src/operator/distinctUntilChanged.ts","../rxjs/src/operator/distinctUntilKeyChanged.ts","../rxjs/src/add/operator/distinctUntilKeyChanged.ts","../rxjs/src/operator/do.ts","../rxjs/src/add/operator/do.ts","../rxjs/src/operator/exhaust.ts","../rxjs/src/add/operator/exhaust.ts","../rxjs/src/operator/exhaustMap.ts","../rxjs/src/add/operator/exhaustMap.ts","../rxjs/src/operator/expand.ts","../rxjs/src/add/operator/expand.ts","../rxjs/src/operator/elementAt.ts","../rxjs/src/add/operator/elementAt.ts","../rxjs/src/add/operator/filter.ts","../rxjs/src/operator/finally.ts","../rxjs/src/add/operator/finally.ts","../rxjs/src/add/operator/find.ts","../rxjs/src/operator/find.ts","../rxjs/src/operator/findIndex.ts","../rxjs/src/add/operator/findIndex.ts","../rxjs/src/operator/first.ts","../rxjs/src/add/operator/first.ts","../rxjs/src/util/MapPolyfill.ts","../rxjs/src/util/Map.ts","../rxjs/src/util/FastMap.ts","../rxjs/src/operator/groupBy.ts","../rxjs/src/add/operator/groupBy.ts","../rxjs/src/util/noop.ts","../rxjs/src/operator/ignoreElements.ts","../rxjs/src/add/operator/ignoreElements.ts","../rxjs/src/operator/isEmpty.ts","../rxjs/src/add/operator/isEmpty.ts","../rxjs/src/operator/audit.ts","../rxjs/src/add/operator/audit.ts","../rxjs/src/operator/auditTime.ts","../rxjs/src/add/operator/auditTime.ts","../rxjs/src/operator/last.ts","../rxjs/src/add/operator/last.ts","../rxjs/src/operator/let.ts","../rxjs/src/add/operator/let.ts","../rxjs/src/operator/every.ts","../rxjs/src/add/operator/every.ts","../rxjs/src/add/operator/map.ts","../rxjs/src/operator/mapTo.ts","../rxjs/src/add/operator/mapTo.ts","../rxjs/src/operator/materialize.ts","../rxjs/src/add/operator/materialize.ts","../rxjs/src/operator/max.ts","../rxjs/src/add/operator/max.ts","../rxjs/src/operator/merge.ts","../rxjs/src/add/operator/merge.ts","../rxjs/src/add/operator/mergeAll.ts","../rxjs/src/operator/mergeMap.ts","../rxjs/src/add/operator/mergeMap.ts","../rxjs/src/operator/mergeMapTo.ts","../rxjs/src/add/operator/mergeMapTo.ts","../rxjs/src/operator/mergeScan.ts","../rxjs/src/add/operator/mergeScan.ts","../rxjs/src/operator/min.ts","../rxjs/src/add/operator/min.ts","../rxjs/src/add/operator/multicast.ts","../rxjs/src/add/operator/observeOn.ts","../rxjs/src/observable/PromiseObservable.ts","../rxjs/src/observable/IteratorObservable.ts","../rxjs/src/observable/ArrayLikeObservable.ts","../rxjs/src/observable/FromObservable.ts","../rxjs/src/operator/onErrorResumeNext.ts","../rxjs/src/add/operator/onErrorResumeNext.ts","../rxjs/src/operator/pairwise.ts","../rxjs/src/add/operator/pairwise.ts","../rxjs/src/util/not.ts","../rxjs/src/operator/filter.ts","../rxjs/src/operator/partition.ts","../rxjs/src/add/operator/partition.ts","../rxjs/src/operator/pluck.ts","../rxjs/src/add/operator/pluck.ts","../rxjs/src/operator/publish.ts","../rxjs/src/add/operator/publish.ts","../rxjs/src/operator/publishBehavior.ts","../rxjs/src/add/operator/publishBehavior.ts","../rxjs/src/operator/publishReplay.ts","../rxjs/src/add/operator/publishReplay.ts","../rxjs/src/operator/publishLast.ts","../rxjs/src/add/operator/publishLast.ts","../rxjs/src/operator/race.ts","../rxjs/src/add/operator/race.ts","../rxjs/src/operator/reduce.ts","../rxjs/src/add/operator/reduce.ts","../rxjs/src/operator/repeat.ts","../rxjs/src/add/operator/repeat.ts","../rxjs/src/operator/repeatWhen.ts","../rxjs/src/add/operator/repeatWhen.ts","../rxjs/src/operator/retry.ts","../rxjs/src/add/operator/retry.ts","../rxjs/src/operator/retryWhen.ts","../rxjs/src/add/operator/retryWhen.ts","../rxjs/src/operator/sample.ts","../rxjs/src/add/operator/sample.ts","../rxjs/src/operator/sampleTime.ts","../rxjs/src/add/operator/sampleTime.ts","../rxjs/src/operator/scan.ts","../rxjs/src/add/operator/scan.ts","../rxjs/src/operator/sequenceEqual.ts","../rxjs/src/add/operator/sequenceEqual.ts","../rxjs/src/operator/multicast.ts","../rxjs/src/operator/share.ts","../rxjs/src/add/operator/share.ts","../rxjs/src/operator/single.ts","../rxjs/src/add/operator/single.ts","../rxjs/src/operator/skip.ts","../rxjs/src/add/operator/skip.ts","../rxjs/src/operator/skipUntil.ts","../rxjs/src/add/operator/skipUntil.ts","../rxjs/src/operator/skipWhile.ts","../rxjs/src/add/operator/skipWhile.ts","../rxjs/src/operator/mergeAll.ts","../rxjs/src/operator/concat.ts","../rxjs/src/operator/startWith.ts","../rxjs/src/add/operator/startWith.ts","../rxjs/src/util/isNumeric.ts","../rxjs/src/observable/SubscribeOnObservable.ts","../rxjs/src/operator/subscribeOn.ts","../rxjs/src/add/operator/subscribeOn.ts","../rxjs/src/operator/switch.ts","../rxjs/src/add/operator/switch.ts","../rxjs/src/operator/switchMap.ts","../rxjs/src/add/operator/switchMap.ts","../rxjs/src/operator/switchMapTo.ts","../rxjs/src/add/operator/switchMapTo.ts","../rxjs/src/operator/take.ts","../rxjs/src/add/operator/take.ts","../rxjs/src/operator/takeLast.ts","../rxjs/src/add/operator/takeLast.ts","../rxjs/src/operator/takeUntil.ts","../rxjs/src/add/operator/takeUntil.ts","../rxjs/src/operator/takeWhile.ts","../rxjs/src/add/operator/takeWhile.ts","../rxjs/src/operator/throttle.ts","../rxjs/src/add/operator/throttle.ts","../rxjs/src/operator/throttleTime.ts","../rxjs/src/add/operator/throttleTime.ts","../rxjs/src/add/operator/timeInterval.ts","../rxjs/src/operator/timeout.ts","../rxjs/src/add/operator/timeout.ts","../rxjs/src/util/isDate.ts","../rxjs/src/operator/timeoutWith.ts","../rxjs/src/add/operator/timeoutWith.ts","../rxjs/src/add/operator/timestamp.ts","../rxjs/src/operator/toArray.ts","../rxjs/src/add/operator/toArray.ts","../rxjs/src/operator/toPromise.ts","../rxjs/src/add/operator/toPromise.ts","../rxjs/src/operator/window.ts","../rxjs/src/add/operator/window.ts","../rxjs/src/operator/windowCount.ts","../rxjs/src/add/operator/windowCount.ts","../rxjs/src/operator/windowTime.ts","../rxjs/src/add/operator/windowTime.ts","../rxjs/src/operator/windowToggle.ts","../rxjs/src/add/operator/windowToggle.ts","../rxjs/src/operator/windowWhen.ts","../rxjs/src/add/operator/windowWhen.ts","../rxjs/src/operator/withLatestFrom.ts","../rxjs/src/add/operator/withLatestFrom.ts","../rxjs/src/add/operator/zip.ts","../rxjs/src/observable/ScalarObservable.ts","../rxjs/src/observable/EmptyObservable.ts","../rxjs/src/util/isScheduler.ts","../rxjs/src/observable/ArrayObservable.ts","../rxjs/src/OuterSubscriber.ts","../rxjs/src/util/isPromise.ts","../rxjs/src/InnerSubscriber.ts","../rxjs/src/util/subscribeToResult.ts","../rxjs/src/operator/zip.ts","../rxjs/src/operator/zipAll.ts","../rxjs/src/add/operator/zipAll.ts","../rxjs/src/AsyncSubject.ts","../rxjs/src/operator/observeOn.ts","../rxjs/src/ReplaySubject.ts","../rxjs/src/BehaviorSubject.ts","../rxjs/src/observable/ConnectableObservable.ts","../rxjs/src/util/EmptyError.ts","../rxjs/src/util/ArgumentOutOfRangeError.ts","../rxjs/src/util/TimeoutError.ts","../rxjs/src/operator/timeInterval.ts","../rxjs/src/operator/timestamp.ts","../rxjs/src/Notification.ts","../rxjs/src/testing/ColdObservable.ts","../rxjs/src/util/ObjectUnsubscribedError.ts","../rxjs/src/SubjectSubscription.ts","../rxjs/src/Subject.ts","../rxjs/src/testing/SubscriptionLoggable.ts","../rxjs/src/util/applyMixins.ts","../rxjs/src/testing/HotObservable.ts","../rxjs/src/testing/SubscriptionLog.ts","../rxjs/src/testing/TestScheduler.ts","../rxjs/src/scheduler/VirtualTimeScheduler.ts","../rxjs/src/util/toSubscriber.ts","../rxjs/src/Observable.ts","../rxjs/src/Observer.ts","../rxjs/src/Subscriber.ts","../rxjs/src/operator/map.ts","../rxjs/src/observable/dom/AjaxObservable.ts","../rxjs/src/util/Immediate.ts","../rxjs/src/scheduler/AsapAction.ts","../rxjs/src/scheduler/AsapScheduler.ts","../rxjs/src/scheduler/asap.ts","../rxjs/src/scheduler/async.ts","../rxjs/src/scheduler/QueueAction.ts","../rxjs/src/scheduler/QueueScheduler.ts","../rxjs/src/scheduler/queue.ts","../rxjs/src/util/isArray.ts","../rxjs/src/util/isObject.ts","../rxjs/src/util/isFunction.ts","../rxjs/src/util/tryCatch.ts","../rxjs/src/util/errorObject.ts","../rxjs/src/util/UnsubscriptionError.ts","../rxjs/src/Subscription.ts","../rxjs/src/scheduler/Action.ts","../rxjs/src/scheduler/AsyncAction.ts","../rxjs/src/util/AnimationFrame.ts","../rxjs/src/scheduler/AnimationFrameAction.ts","../rxjs/src/Scheduler.ts","../rxjs/src/scheduler/AsyncScheduler.ts","../rxjs/src/scheduler/AnimationFrameScheduler.ts","../rxjs/src/scheduler/animationFrame.ts","../rxjs/src/symbol/rxSubscriber.ts","../rxjs/src/symbol/iterator.ts","../rxjs/src/util/root.ts","../rxjs/src/symbol/observable.ts","../rxjs/src/Rx.ts"],"names":["dispatchNext","arg","value","subject","next","complete","dispatchError","err","error","Observable_1","$__require","tryCatch_1","errorObject_1","AsyncSubject_1","BoundCallbackObservable","_super","callbackFunc","selector","args","context","scheduler","call","this","__extends","create","func","undefined","_i","arguments","length","prototype","_subscribe","subscriber","schedule","dispatch","source","AsyncSubject","handler","handlerFn","innerArgs","result_1","tryCatch","apply","errorObject","e","concat","subscribe","state","self","result_2","add","Observable","exports","BoundCallbackObservable_1","bindCallback","bindCallback_1","_a","shift","BoundNodeCallbackObservable","BoundNodeCallbackObservable_1","bindNodeCallback","bindNodeCallback_1","combineLatest","observables","project","isScheduler_1","isScheduler","pop","isArray_1","isArray","ArrayObservable_1","ArrayObservable","lift","combineLatest_1","CombineLatestOperator","concat_1","concatStatic","subscribeToResult_1","OuterSubscriber_1","DeferObservable","observableFactory","DeferSubscriber","destination","factory","tryDefer","_callFactory","_error","result","subscribeToResult","OuterSubscriber","DeferObservable_1","defer","defer_1","EmptyObservable_1","empty","EmptyObservable","empty_1","ForkJoinObservable","sources","resultSelector","ForkJoinSubscriber","completed","haveValues","len","total","values","Array","i","innerSubscription","outerIndex","notifyNext","outerValue","innerValue","innerIndex","innerSub","_hasValue","notifyComplete","ForkJoinObservable_1","forkJoin","forkJoin_1","FromObservable_1","from","FromObservable","from_1","isNodeStyleEventEmitter","sourceObj","addListener","removeListener","isJQueryStyleEventEmitter","on","off","isNodeList","toString","isHTMLCollection","isEventTarget","addEventListener","removeEventListener","isFunction_1","Subscription_1","Object","FromEventObservable","eventName","options","target","isFunction","setupSubscription","unsubscribe","source_1","source_2","TypeError","source_3","Subscription","FromEventObservable_1","fromEvent","fromEvent_1","FromEventPatternObservable","addHandler","removeHandler","_this","_callSelector","retValue","_callAddHandler","errorSubscriber","FromEventPatternObservable_1","fromEventPattern","fromEventPattern_1","PromiseObservable_1","fromPromise","PromiseObservable","fromPromise_1","selfSelector","GenerateObservable","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","closed","needIterate","GenerateObservable_1","generate","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","_complete","IfObservable_1","_if","if_1","if","isNumeric_1","async_1","IntervalObservable","period","async","isNumeric","index","IntervalObservable_1","interval","interval_1","merge_1","merge","mergeStatic","race_1","race","raceStatic","noop_1","NeverObservable","noop","NeverObservable_1","never","never_1","of","of_1","onErrorResumeNext_1","onErrorResumeNext","onErrorResumeNextStatic","obj","keys","key","PairsObservable","idx","PairsObservable_1","pairs","pairs_1","RangeObservable","start","count","_count","RangeObservable_1","range","range_1","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","UsingObservable_1","using","using_1","ErrorObservable","ErrorObservable_1","_throw","throw_1","throw","isDate_1","TimerObservable","dueTime","Number","isDate","now","initialDelay","action","TimerObservable_1","timer","timer_1","zip_1","zip","zipStatic","AjaxObservable_1","ajax","AjaxObservable","ajax_1","assignImpl","k","hasOwnProperty","getAssign","root","assign","root_1","Subject_1","Subscriber_1","ReplaySubject_1","assign_1","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","Subject","url","Error","ReplaySubject","JSON","parse","data","operator","sock","_resetState","socket","multiplex","subMsg","unsubMsg","messageFilter","observer","subscription","x","_connectSocket","protocol","readyState","close","onopen","openObserver","queue","Subscriber","send","closingObserver","code","reason","onerror","onclose","closeObserver","wasClean","onmessage","observers","AnonymousSubject","WebSocketSubject_1","webSocket","webSocket_1","buffer","closingNotifier","BufferOperator","BufferSubscriber","_next","push","buffer_1","bufferCount","bufferSize","startBufferEvery","BufferCountOperator","BufferCountSubscriber","buffers","splice","bufferCount_1","bufferTime","bufferTimeSpan","bufferCreationInterval","maxBufferSize","POSITIVE_INFINITY","BufferTimeOperator","dispatchBufferTimeSpanOnly","prevContext","closeContext","openContext","closeAction","dispatchBufferCreation","dispatchBufferClose","BufferTimeSubscriber","Context","contexts","timespanOnly","timeSpanOnlyState","closeState","creationState","filledBufferContext","onBufferFull","_unsubscribe","remove","indexOf","bufferTime_1","bufferToggle","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferToggle_1","bufferWhen","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","bufferWhen_1","_catch","CatchOperator","caught","CatchSubscriber","isStopped","err2","_unsubscribeAndRecycle","catch_1","catch","combineAll","combineAll_1","slice","unshift","none","CombineLatestSubscriber","active","observable","toRespond","unused","oldVal","_tryProject","concatAll","mergeAll_1","MergeAllOperator","concatAll_1","concatMap","mergeMap_1","MergeMapOperator","concatMap_1","concatMapTo","innerObservable","mergeMapTo_1","MergeMapToOperator","concatMapTo_1","predicate","CountOperator","CountSubscriber","_tryPredicate","count_1","dematerialize","DeMaterializeOperator","DeMaterializeSubscriber","observe","dematerialize_1","debounce","durationSelector","DebounceOperator","DebounceSubscriber","hasValue","durationSubscription","_tryNext","emitValue","duration","debounce_1","debounceTime","DebounceTimeOperator","debouncedNext","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","debounceTime_1","defaultIfEmpty","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","defaultIfEmpty_1","delay","absoluteDelay","delayFor","Math","abs","DelayOperator","Notification_1","DelaySubscriber","errored","time","notification","delay_1","max","_schedule","scheduleNotification","message","DelayMessage","Notification","createNext","createComplete","delayWhen","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","notifyError","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","parent","sourceSubscribed","subscribeToSource","delayWhen_1","minimalSetImpl","MinimalSet","_values","has","defineProperty","clear","Set","distinct","keySelector","flushes","DistinctOperator","Set_1","DistinctSubscriber","_useKeySelector","_finalizeNext","distinct_1","distinctUntilChanged_1","distinctUntilChanged","compare","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","y","Boolean","distinctUntilKeyChanged","distinctUntilKeyChanged_1","_do","nextOrObserver","DoOperator","DoSubscriber","safeSubscriber","syncErrorThrowable","syncErrorThrown","syncErrorValue","do_1","do","exhaust","SwitchFirstOperator","SwitchFirstSubscriber","hasCompleted","hasSubscription","exhaust_1","exhaustMap","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","exhaustMap_1","expand","concurrent","ExpandOperator","ExpandSubscriber","subscribeToProjection","expand_1","elementAt","ElementAtOperator","ArgumentOutOfRangeError_1","ArgumentOutOfRangeError","ElementAtSubscriber","elementAt_1","filter_1","filter","_finally","callback","FinallyOperator","FinallySubscriber","finally_1","finally","find_1","find","thisArg","FindValueOperator","yieldIndex","FindValueSubscriber","findIndex","findIndex_1","first","FirstOperator","EmptyError_1","FirstSubscriber","_emitted","_emit","_tryResultSelector","_emitFinal","EmptyError","first_1","MapPolyfill","size","_keys","get","set","delete","forEach","cb","MapPolyfill_1","Map","FastMap","groupBy","elementSelector","subjectSelector","GroupByOperator","Map_1","FastMap_1","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","element","group","groupedObservable","GroupedObservable","GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","groupBy_1","ignoreElements","IgnoreElementsOperator","IgnoreElementsSubscriber","ignoreElements_1","IsEmptyOperator","IsEmptySubscriber","isEmpty_1","audit","AuditOperator","AuditSubscriber","throttled","clearThrottle","audit_1","auditTime","AuditTimeOperator","AuditTimeSubscriber","auditTime_1","last","LastOperator","LastSubscriber","last_1","letProto","let_1","let","letBind","every","EveryOperator","EverySubscriber","everyValueMatch","every_1","map_1","map","mapTo","MapToOperator","MapToSubscriber","mapTo_1","materialize","MaterializeOperator","MaterializeSubscriber","createError","materialize_1","comparer","reduce_1","ReduceOperator","max_1","mergeAll","mergeMap","MergeMapSubscriber","_innerSub","ish","_notifyResultSelector","flatMap","mergeMapTo","MergeMapToSubscriber","flatMapTo","mergeScan","accumulator","seed","MergeScanOperator","MergeScanSubscriber","acc","mergeScan_1","min","min_1","multicast_1","multicast","observeOn_1","observeOn","promise","_isScalar","then","setTimeout","getIterator","iterator_1","$$iterator","StringIterator","ArrayIterator","toLength","o","isNaN","numberIsFinite","sign","floor","maxSafeInteger","isFinite","valueAsNumber","IteratorObservable","iterator","hasError","done","return","str","charAt","arr","pow","ScalarObservable_1","ArrayLikeObservable","arrayLike","ScalarObservable","isPromise_1","IteratorObservable_1","ArrayLikeObservable_1","observable_1","isArrayLike","$$observable","isPromise","ObserveOnSubscriber","nextSources","OnErrorResumeNextOperator","OnErrorResumeNextSubscriber","subscribeToNextSource","pairwise","PairwiseOperator","PairwiseSubscriber","hasPrev","prev","pairwise_1","not","pred","notPred","FilterOperator","FilterSubscriber","partition","not_1","partition_1","pluck","properties","plucker","props","currentProp","p","pluck_1","publish","publish_1","publishBehavior","BehaviorSubject_1","BehaviorSubject","publishBehavior_1","publishReplay","windowTime","publishReplay_1","publishLast","publishLast_1","RaceOperator","RaceSubscriber","hasFirst","subscriptions","reduce","hasSeed","ReduceSubscriber","_tryReduce","repeat","RepeatOperator","RepeatSubscriber","repeat_1","repeatWhen","notifier","RepeatWhenOperator","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","notifications","repeatWhen_1","retry","RetryOperator","RetrySubscriber","retry_1","retryWhen","RetryWhenOperator","RetryWhenSubscriber","errors","retryWhen_1","sample","SampleOperator","sampleSubscriber","SampleSubscriber","sample_1","sampleTime","SampleTimeOperator","dispatchNotification","SampleTimeSubscriber","sampleTime_1","scan","ScanOperator","ScanSubscriber","_seed","scan_1","sequenceEqual","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","_b","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","_c","a","b","areEqual","nextB","sequenceEqual_1","subjectOrSubjectFactory","subjectFactory","MulticastOperator","connectable","ConnectableObservable_1","connectableObservableDescriptor","shareSubjectFactory","share","refCount","share_1","single","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","single_1","skip","SkipOperator","SkipSubscriber","skip_1","skipUntil","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipUntil_1","skipWhile","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","skipWhile_1","MergeAllSubscriber","startWith","array","startWith_1","val","parseFloat","asap_1","SubscribeOnObservable","delayTime","asap","subscribeOn","SubscribeOnOperator","SubscribeOnObservable_1","subscribeOn_1","_switch","SwitchOperator","SwitchSubscriber","unsubscribeInner","switch_1","switch","switchMap","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","switchMap_1","switchMapTo","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","switchMapTo_1","take","TakeOperator","TakeSubscriber","take_1","takeLast","TakeLastOperator","TakeLastSubscriber","ring","takeLast_1","takeUntil","TakeUntilOperator","TakeUntilSubscriber","takeUntil_1","takeWhile","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","takeWhile_1","throttle","ThrottleOperator","ThrottleSubscriber","tryDurationSelector","emitAndThrottle","throttle_1","throttleTime","ThrottleTimeOperator","ThrottleTimeSubscriber","throttleTime_1","timeInterval_1","timeInterval","timeout","due","absoluteTimeout","waitFor","TimeoutOperator","TimeoutError_1","TimeoutError","errorInstance","TimeoutSubscriber","_previousIndex","_hasCompleted","scheduleTimeout","dispatchTimeout","currentIndex","previousIndex","notifyTimeout","timeout_1","Date","timeoutWith","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","timeoutSubscription","handleTimeout","timeoutState","timeoutWith_1","timestamp_1","timestamp","toArray","ToArrayOperator","ToArraySubscriber","toArray_1","toPromise","PromiseCtor","Rx","config","Promise","resolve","reject","toPromise_1","window","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","window_1","windowCount","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","c","windowCount_1","windowTimeSpan","windowCreationInterval","WindowTimeOperator","dispatchWindowTimeSpanOnly","closeWindow","dispatchWindowCreation","timeSpanState","dispatchWindowClose","WindowTimeSubscriber","window_2","windowTime_1","windowToggle","WindowToggleOperator","WindowToggleSubscriber","openSubscription","windowToggle_1","windowWhen","unsubscribeClosingNotification","closingNotification","windowWhen_1","withLatestFrom","WithLatestFromOperator","WithLatestFromSubscriber","found","withLatestFrom_1","zipProto","InnerSubscriber","outerSubscriber","InnerSubscriber_1","item","obs","isObject_1","isObject","msg","ZipOperator","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","isComplete","zipAll","zipAll_1","hasNext","thrownError","EMPTY","ObserveOnOperator","scheduleMessage","ObserveOnMessage","queue_1","ObjectUnsubscribedError_1","SubjectSubscription_1","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","ObjectUnsubscribedError","SubjectSubscription","eventsCount","spliceCount","_value","getValue","ConnectableObservable","_refCount","getSubject","_subject","connect","connection","_connection","ConnectableSubscriber","RefCountOperator","writable","SubjectSubscriber","refCounter","RefCountSubscriber","sharedConnection","name","stack","TimeIntervalOperator","TimeInterval","TimeIntervalSubscriber","lastTime","span","TimestampOperator","Timestamp","TimestampSubscriber","kind","accept","toObservable","undefinedValueNotification","completeNotification","SubscriptionLoggable_1","applyMixins_1","ColdObservable","messages","logSubscribedFrame","logUnsubscribedFrame","scheduleMessages","messagesLength","frame","applyMixins","SubscriptionLoggable","subscriberIndex","rxSubscriber_1","$$rxSubscriber","copy","_trySubscribe","asObservable","SubscriptionLog_1","SubscriptionLog","subscriptionLogs","oldSubscriptionLog","subscribedFrame","derivedCtor","baseCtors","baseCtor","propertyKeys","getOwnPropertyNames","j","len2","name_1","HotObservable","setup","unsubscribedFrame","ColdObservable_1","HotObservable_1","VirtualTimeScheduler_1","defaultMaxFrame","TestScheduler","assertDeepEqual","VirtualAction","hotObservables","coldObservables","flushTests","createTime","marbles","frameTimeFactor","createColdObservable","parseMarbles","cold","createHotObservable","materializeInnerObservable","outerFrame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","toBe","errorValue","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","flush","readyFlushTests","test","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","VirtualTimeScheduler","AsyncAction_1","AsyncScheduler_1","SchedulerAction","maxFrames","actions","execute","AsyncScheduler","work","id","requestAsyncId","sort","sortActions","recycleAsyncId","AsyncAction","toSubscriber","Observer_1","toSubscriber_1","observerOrNext","sink","destinationOrNext","SafeSubscriber","_parent","_parents","_parentSubscriber","bind","_context","__tryOrSetError","__tryOrUnsub","fn","MapOperator","MapSubscriber","getCORSRequest","XMLHttpRequest","xhr","withCredentials","XDomainRequest","getXMLHttpRequest","progId","progIds","ActiveXObject","ajaxGet","headers","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxGetJSON","responseType","response","urlOrRequest","request","createXHR","crossDomain","prop","AjaxSubscriber","post","put","getJSON","FormData","serializeBody","AjaxResponse","user","password","setupEvents","open","setHeaders","contentType","splitIndex","substring","encodeURI","join","stringify","setRequestHeader","xhrTimeout","progressSubscriber","AjaxTimeoutError","xhrReadyStateChange","status_1","status","responseText","AjaxError","ontimeout","upload","xhrProgress_1","onprogress","xhrError_1","onreadystatechange","abort","originalEvent","responseXML","ImmediateDefinition","setImmediate","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","process","MessageChannel","document","createElement","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","partiallyApplied","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","random","onGlobalMessage","globalMessageHandler","event","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","Immediate","Immediate_1","AsapAction","scheduled","AsapScheduler","AsapAction_1","AsapScheduler_1","QueueAction","_execute","QueueScheduler","QueueAction_1","QueueScheduler_1","tryCatcher","tryCatchTarget","UnsubscriptionError","flattenUnsubscriptionErrors","errs","UnsubscriptionError_1","_subscriptions","hasErrors","trial","sub","teardown","_addParent","tmp","subscriptionIndex","Action","Action_1","pending","setInterval","clearInterval","RequestAnimationFrameDefinition","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","AnimationFrame","AnimationFrame_1","AnimationFrameAction","Scheduler","Scheduler_1","AnimationFrameScheduler","AnimationFrameAction_1","AnimationFrameScheduler_1","animationFrame","Symbol","for","symbolIteratorPonyfill","global","getSymbolObservable","TestScheduler_1","animationFrame_1","rxSubscriber"],"mappings":"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","file":"Rx.min.js","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done.\n   *\n   * The output of `bindCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable where the\n   * results will be delivered to.\n   *\n   * If `func` depends on some context (`this` property), that context will be set\n   * to the same context that returned function has at call time. In particular, if `func`\n   * is usually called as method of some object, in order to preserve proper behaviour,\n   * it is recommended to set context of output function to that object as well,\n   * provided `func` is not already bound.\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Use bindCallback on object method</caption>\n   * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n   * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n   * .subscribe(subscriber);\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              private scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T>, context: any }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber, context } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error, while remaining\n   * arguments are the callback result.\n   *\n   * The output of `bindNodeCallback` is a\n   * function that takes the same parameters as `func`, except the last one (the\n   * callback). When the output function is called with arguments, it will\n   * return an Observable where the results will be delivered to.\n   *\n   * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n   * of returned function, when it is called.\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              public scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n}\n\ninterface DispatchState<T> {\n  source: BoundNodeCallbackObservable<T>;\n  subscriber: Subscriber<T>;\n  context: any;\n}\n\nfunction dispatch<T>(this: Action<DispatchState<T>>, state: DispatchState<T>) {\n  const self = (<Subscription> this);\n  const { source, subscriber, context } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        subject.error(err);\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n    if (result === errorObject) {\n      subject.error(errorObject.e);\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import {  Observable, ObservableInput  } from '../Observable';\nimport {  IScheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operator/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: IScheduler): Observable<R>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: IScheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | IScheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | IScheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable, in order, and\n * collecting an array of each of the most recent values any time any of the\n * input Observables emits, then either taking that array and passing it as\n * arguments to an optional `project` function and emitting the return value of\n * that, or just emitting the array of recent values directly if there is no\n * `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} observable1 An input Observable to combine with the\n * source Observable.\n * @param {Observable} observable2 An input Observable to combine with the\n * source Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    IScheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: IScheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <IScheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import {  concatStatic  } from '../operator/concat';\n\nexport const concat = concatStatic;","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * // Results in the following behavior:\n   * // If the result of Math.random() is greater than 0.5 it will listen\n   * // for clicks anywhere on the \"document\"; when document is clicked it\n   * // will log a MouseEvent object to the console. If the result is less\n   * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n   *\n   * @see {@link create}\n   *\n   * @param {function(): Observable|Promise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * @param sources\n   * @return {any}\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nconst toString: Function = Object.prototype.toString;\n\nexport type NodeStyleEventEmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * Creates an Observable by attaching an event listener to an \"event target\",\n   * which may be an object with `addEventListener` and `removeEventListener`,\n   * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the\n   * DOM, or an HTMLCollection from the DOM. The event handler is attached when\n   * the output Observable is subscribed, and removed when the Subscription is\n   * unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * // Results in:\n   * // MouseEvent object logged to console everytime a click\n   * // occurs on the document.\n   *\n   * @see {@link from}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOMElement, event target, Node.js\n   * EventEmitter, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    } else {\n      throw new TypeError('Invalid event target');\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import { isFunction } from '../util/isFunction';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *\n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *\n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n   * removeHandler function will forward it.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler?: (handler: Function, signal?: any) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler?: (handler: Function, signal?: any) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    const retValue = this._callAddHandler(handler, subscriber);\n\n    if (!isFunction(removeHandler)) {\n      return;\n    }\n\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler, retValue) ;\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): any | null {\n    try {\n      return this.addHandler(handler) || null;\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * IScheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: IScheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: IScheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: IScheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: IScheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | IScheduler,\n                      scheduler?: IScheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector,\n        <IScheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <IScheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { GenerateObservable } from '../../observable/GenerateObservable';\n\nObservable.generate = GenerateObservable.create;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof GenerateObservable.create;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: IScheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: IScheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import {  mergeStatic  } from '../operator/merge';\n\nexport const merge = mergeStatic;","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { Observable } from '../../Observable';\nimport { raceStatic } from '../../operator/race';\n\nObservable.race = raceStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof raceStatic;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please not\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNextStatic } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = onErrorResumeNextStatic;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof onErrorResumeNextStatic;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\r\nimport { Action } from '../scheduler/Action';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(this: Action<PairsContext<T>>, state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  this.schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional IScheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional IScheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: IScheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: IScheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  protected _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * IScheduler and just delivers the notifications synchronously, but may use\n   * an optional IScheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: IScheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: IScheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: IScheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable<T> extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flattens numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create<T>(error: T, scheduler?: IScheduler): ErrorObservable<T> {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: T, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: any): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import {  zipStatic  } from '../operator/zip';\n\nexport const zip = zipStatic;","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import { root } from './root';\n\nexport function assignImpl(target: Object, ...sources: Object[]) {\n  const len = sources.length;\n  for (let i = 0; i < len; i++) {\n    const source = sources[i];\n    for (let k in source) {\n      if (source.hasOwnProperty(k)) {\n        target[k] = source[k];\n      }\n    }\n  }\n  return target;\n};\n\nexport function getAssign(root: any) {\n  return root.Object.assign || assignImpl;\n}\n\nexport const assign = getAssign(root);","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n   *\n   * @example <caption>Wraps browser WebSocket</caption>\n   *\n   * let subject = Observable.webSocket('ws://localhost:8081');\n   * subject.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   * subject.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n   *\n   * import { w3cwebsocket } from 'websocket';\n   *\n   * let socket = new WebSocketSubject({\n   *   url: 'ws://localhost:8081',\n   *   WebSocketCtor: w3cwebsocket\n   * });\n   *\n   * let subject = Observable.webSocket('ws://localhost:8081');\n   * subject.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   * subject.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  private _resetState() {\n    this.socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject<T>();\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this._resetState();\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this._resetState();\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => {\n      this._resetState();\n      observer.error(e);\n    };\n\n    socket.onclose = (e: CloseEvent) => {\n      this._resetState();\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0) {\n        if (socket && socket.readyState === 1) {\n          socket.close();\n        }\n        this._resetState();\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this._resetState();\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(this: Observable<T>, closingNotifier: Observable<any>): Observable<T[]> {\n  return this.lift(new BufferOperator<T>(closingNotifier));\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: typeof buffer;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(this: Observable<T>, bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return this.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    const count = this.count++;\n    const { destination, bufferSize, startBufferEvery, buffers } = this;\n    const startOn = (startBufferEvery == null) ? bufferSize : startBufferEvery;\n\n    if (count % startOn === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    const buffers = this.buffers;\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: typeof bufferCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): Observable<T[]>;\n/* tslint:disable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return this.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: typeof bufferTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(this: Observable<T>, openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return this.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferToggle } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: typeof bufferToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<T[]> {\n  return this.lift(new BufferWhenOperator<T>(closingSelector));\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: typeof bufferWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} an observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nexport function _catch<T, R>(this: Observable<T>, selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<R> {\n  const operator = new CatchOperator(selector);\n  const caught = this.lift(operator);\n  return (operator.caught = caught);\n}\n\nclass CatchOperator<T, R> implements Operator<T, R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: typeof _catch;\n    _catch: typeof _catch;\n  }\n}","import { CombineLatestOperator } from './combineLatest';\nimport { Observable } from '../Observable';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new CombineLatestOperator(project));\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineAll } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: typeof combineAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function combineLatest<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function combineLatest<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function combineLatest<T, R>(this: Observable<T>, array: ObservableInput<T>[]): Observable<Array<T>>;\nexport function combineLatest<T, TOther, R>(this: Observable<T>, array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  observables.unshift(this);\n\n  return this.lift.call(new ArrayObservable(observables), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineLatest } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: typeof combineLatest;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { concat } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: typeof concat;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { MergeAllOperator } from './mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function concatAll<T>(this: Observable<T>): T;\nexport function concatAll<T, R>(this: Observable<T>): Subscribable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(this: Observable<T>): T {\n  return <any>this.lift<any>(new MergeAllOperator<T>(1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: typeof concatAll;\n  }\n}","import { MergeMapOperator } from './mergeMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} an observable of values merged from the projected\n * Observables as they were subscribed to, one at a time. Optionally, these\n * values may have been projected from a passed `projectResult` argument.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return this.lift(new MergeMapOperator(project, resultSelector, 1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: typeof concatMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { MergeMapToOperator } from './mergeMapTo';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function concatMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new MergeMapToOperator(innerObservable, resultSelector, 1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: typeof concatMapTo;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return this.lift(new CountOperator(predicate, this));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { count } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: typeof count;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(this: Observable<T>): Observable<any> {\n  return this.lift(new DeMaterializeOperator());\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: typeof dematerialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: typeof debounce;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(this: Observable<T>, dueTime: number, scheduler: IScheduler = async): Observable<T> {\n  return this.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounceTime } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: typeof debounceTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(this: Observable<T>, defaultValue?: T): Observable<T>;\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue?: R): Observable<T | R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue: R = null): Observable<T | R> {\n  return this.lift(new DefaultIfEmptyOperator(defaultValue));\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: typeof defaultIfEmpty;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(this: Observable<T>, delay: number|Date,\n                         scheduler: IScheduler = async): Observable<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return this.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<any> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch(state: any): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      (<any> this).schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<any>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(private time: number,\n              private notification: any) {\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: typeof delay;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(this: Observable<T>, delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  if (subscriptionDelay) {\n    return new SubscriptionDelayObservable(this, subscriptionDelay)\n            .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return this.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n        this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n    this.add(notifierSubscription);\n\n    this.delayNotifierSubscriptions.push(notifierSubscription);\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delayWhen } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: typeof delayWhen;\n  }\n}","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(this: Observable<T>,\n                               keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): Observable<T> {\n  return this.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Observable } from '../../Observable';\nimport { distinct } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: typeof distinct;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: typeof distinctUntilChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(this: Observable<T>, compare?: (x: T, y: T) => boolean): Observable<T>;\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return this.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { Observable } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string): Observable<T>;\nexport function distinctUntilKeyChanged<T, K>(this: Observable<T>, key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return distinctUntilChanged.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  });\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: typeof distinctUntilKeyChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\n\n/* tslint:disable:max-line-length */\nexport function _do<T>(this: Observable<T>, next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\nexport function _do<T>(this: Observable<T>, observer: PartialObserver<T>): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(this: Observable<T>, nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return this.lift(new DoOperator(nextOrObserver, error, complete));\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: typeof _do;\n    _do: typeof _do;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} Returns an Observable that takes a source of Observables\n * and propagates the first observable exclusively until it completes before\n * subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(this: Observable<T>): Observable<T> {\n  return this.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: typeof exhaust;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchFirstMapOperator(project, resultSelector));\n}\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: typeof exhaustMap;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(this: Observable<T>, project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return this.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: typeof expand;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(this: Observable<T>, index: number, defaultValue?: T): Observable<T> {\n  return this.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { elementAt } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: typeof elementAt;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { filter } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: typeof filter;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback function to be called when source terminates.\n * @return {Observable} an Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(this: Observable<T>, callback: () => void): Observable<T> {\n  return this.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: typeof _finally;\n    _finally: typeof _finally;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { find } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: typeof find;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function find<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): Observable<S>;\nexport function find<T>(this: Observable<T>,\n                        predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return <any>this.lift<any>(new FindValueOperator(predicate, this, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { FindValueOperator } from './find';\n\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return <any>this.lift<any>(new FindValueOperator(predicate, this, true, thisArg));\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: typeof findIndex;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function first<T, S extends T, R>(this: Observable<T>,\n                                         predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): Observable<S>;\nexport function first<T>(this: Observable<T>,\n                         predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function first<T, R>(this: Observable<T>,\n                            predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<R>;\nexport function first<T>(this: Observable<T>,\n                         predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): Observable<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} an Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): Observable<T | R> {\n  return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { first } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: typeof first;\n  }\n}","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>>;\n/* tslint:disable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @param {function(value: T): K} keySelector a function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] a function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * a function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} an Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>> {\n  return this.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super();\n  }\n\n  protected _next(value: T): void {\n    this._complete();\n  }\n\n  protected _error(err: any): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.error(err);\n    }\n    this.parent.removeGroup(this.key);\n  }\n\n  protected _complete(): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.complete();\n    }\n    this.parent.removeGroup(this.key);\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: typeof groupBy;\n  }\n}","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} an empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(this: Observable<T>): Observable<T> {\n  return this.lift(new IgnoreElementsOperator());\n};\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: typeof ignoreElements;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} an Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty<T>(this: Observable<T>): Observable<boolean> {\n  return this.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: typeof isEmpty;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return this.lift(new AuditOperator(durationSelector));\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { audit } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: typeof audit;\n  }\n}","import { async } from '../scheduler/async';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(this: Observable<T>, duration: number, scheduler: IScheduler = async): Observable<T> {\n  return this.lift(new AuditTimeOperator(duration, scheduler));\n}\n\nclass AuditTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditTimeSubscriber<T> extends Subscriber<T> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));\n    }\n  }\n\n  clearThrottle(): void {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n}\n\nfunction dispatchNext<T>(subscriber: AuditTimeSubscriber<T>): void {\n  subscriber.clearThrottle();\n}\n","import { Observable } from '../../Observable';\nimport { auditTime } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: typeof auditTime;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function last<T, S extends T, R>(this: Observable<T>,\n                                        predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): Observable<S>;\nexport function last<T>(this: Observable<T>,\n                        predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function last<T, R>(this: Observable<T>,\n                           predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): Observable<R>;\nexport function last<T>(this: Observable<T>,\n                        predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - the condition any source emitted item has to satisfy.\n * @return {Observable} an Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): Observable<T | R> {\n  return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { last } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: typeof last;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(this: Observable<T>, func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: typeof letProto;\n    letBind: typeof letProto;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate a function for determining if an item meets a specified condition.\n * @param {any} [thisArg] optional object to use for `this` in the callback\n * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return this.lift(new EveryOperator(predicate, thisArg, this));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { every } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: typeof every;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { map } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: typeof map;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(this: Observable<T>, value: R): Observable<R> {\n  return this.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: typeof mapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(this: Observable<T>): Observable<Notification<T>> {\n  return this.lift(new MaterializeOperator());\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: typeof materialize;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two\n * items.\n * @return {Observable} an Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n  return this.lift(new ReduceOperator(max));\n}\n","\nimport { Observable } from '../../Observable';\nimport { max } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: typeof max;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\nimport { isScheduler } from '../util/isScheduler';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(this: Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler | number>): Observable<T>;\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n  return this.lift.call(mergeStatic<T, R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function mergeStatic<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function mergeStatic<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T>(...observables: (ObservableInput<T> | IScheduler | number)[]): Observable<T>;\nexport function mergeStatic<T, R>(...observables: (ObservableInput<any> | IScheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...Observable} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function mergeStatic<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: IScheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <IScheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(<any>observables, scheduler).lift(new MergeAllOperator<R>(concurrent));\n}\n","\nimport { Observable } from '../../Observable';\nimport { merge } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: typeof merge;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { mergeAll } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: typeof mergeAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<I | R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: typeof mergeMap;\n    mergeMap: typeof mergeMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: typeof mergeMapTo;\n    mergeMapTo: typeof mergeMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(this: Observable<T>,\n                                accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return this.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: typeof mergeScan;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.\n * @return {Observable<R>} an Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return this.lift(new ReduceOperator(min));\n}\n","\nimport { Observable } from '../../Observable';\nimport { min } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: typeof min;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { multicast } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: typeof multicast;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { observeOn } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: typeof observeOn;\n  }\n}","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {Promise<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: Promise<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: Promise<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { $$iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [$$iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [$$iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[$$iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[$$iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { $$iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operator/observeOn';\nimport { $$observable } from '../symbol/observable';\n\nconst isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[$$observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[$$iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[$$observable]().subscribe(subscriber);\n    } else {\n      return ish[$$observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R> ;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return this.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: typeof onErrorResumeNext;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(this: Observable<T>): Observable<[T, T]> {\n  return this.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { pairwise } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: typeof pairwise;\n  }\n}","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(this: Observable<T>,\n                                       predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): Observable<S>;\nexport function filter<T>(this: Observable<T>,\n                          predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return this.lift(new FilterOperator(predicate, thisArg));\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n    this.predicate = predicate;\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(this: Observable<T>, predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return [\n    filter.call(this, predicate, thisArg),\n    filter.call(this, not(predicate, thisArg))\n  ];\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: typeof partition;\n  }\n}","import { Observable } from '../Observable';\nimport { map } from './map';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} Returns a new Observable of property values from the\n * source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(this: Observable<T>, ...properties: string[]): Observable<R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return map.call(this, plucker(properties, length));\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: typeof pluck;\n  }\n}","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(this: Observable<T>): ConnectableObservable<T>;\nexport function publish<T>(this: Observable<T>, selector: selector<T>): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} Optional selector function which can use the multicasted source sequence as many times as needed,\n * without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return a ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T>(this: Observable<T>, selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  return selector ? multicast.call(this, () => new Subject<T>(), selector) :\n                    multicast.call(this, new Subject<T>());\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n","\nimport { Observable } from '../../Observable';\nimport { publish } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: typeof publish;\n  }\n}","import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(this: Observable<T>, value: T): ConnectableObservable<T> {\n  return multicast.call(this, new BehaviorSubject<T>(value));\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: typeof publishBehavior;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T>(this: Observable<T>, bufferSize: number = Number.POSITIVE_INFINITY,\n                                 windowTime: number = Number.POSITIVE_INFINITY,\n                                 scheduler?: IScheduler): ConnectableObservable<T> {\n  return multicast.call(this, new ReplaySubject<T>(bufferSize, windowTime, scheduler));\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: typeof publishReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(this: Observable<T>): ConnectableObservable<T> {\n  return multicast.call(this, new AsyncSubject<T>());\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishLast } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: typeof publishLast;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, ...observables: Array<Observable<any> | Array<Observable<T>>>): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<T>>>observables[0];\n  }\n\n  return this.lift.call(raceStatic<T>(this, ...observables));\n}\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function raceStatic<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function raceStatic<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { race } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: typeof race;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index?: number) => R, seed?: R): Observable<R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return this.lift(new ReduceOperator(accumulator, seed, hasSeed));\n}\n\nexport class ReduceOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index?: number) => R, private seed?: R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ReduceSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private acc: T | R;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T, index?: number) => R,\n              seed: R,\n              private hasSeed: boolean) {\n    super(destination);\n    this.acc = seed;\n\n    if (!this.hasSeed) {\n      this.index++;\n    }\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue || (this.hasValue = this.hasSeed)) {\n      this._tryReduce(value);\n    } else {\n      this.acc = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryReduce(value: T) {\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.acc, value, this.index++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.acc = result;\n  }\n\n  protected _complete() {\n    if (this.hasValue || this.hasSeed) {\n      this.destination.next(this.acc);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: typeof reduce;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times,\n * on a particular IScheduler.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {Scheduler} [scheduler] the IScheduler to emit the items on.\n * @param {number} [count] the number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} an Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else if (count < 0) {\n    return this.lift(new RepeatOperator(-1, this));\n  } else {\n    return this.lift(new RepeatOperator(count - 1, this));\n  }\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: typeof repeat;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of a `complete`.\n * A `complete` will cause the emission of the Throwable that cause the complete to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `complete` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * IScheduler.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the IScheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(this: Observable<T>, notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      } else if (this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: typeof repeatWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that mirrors the source Observable, resubscribing to it if it calls `error` and the\n * predicate returns true for that specific exception and retry count.\n * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of\n * count resubscriptions (given as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} number of retry attempts before failing.\n * @return {Observable} the source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return this.lift(new RetryOperator(count, this));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: typeof retry;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of an `error`.\n * An `error` will cause the emission of the Throwable that cause the error to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `error` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * IScheduler.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the IScheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(this: Observable<T>, notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RetryWhenOperator(notifier, this));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: typeof retryWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: typeof sample;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(this: Observable<T>, period: number, scheduler: IScheduler = async): Observable<T> {\n  return this.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: typeof sampleTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return this.lift(new ScanOperator(accumulator, seed, hasSeed));\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R, private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\n\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: typeof scan;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo the observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(this: Observable<T>, compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return this.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: typeof sequenceEqual;\n  }\n}","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: factoryOrValue<Subject<T>>): ConnectableObservable<T>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: selector<T>): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} an Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                             selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  let subjectFactory: () => Subject<T>;\n  if (typeof subjectOrSubjectFactory === 'function') {\n    subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n  } else {\n    subjectFactory = function subjectFactory() {\n      return <Subject<T>>subjectOrSubjectFactory;\n    };\n  }\n\n  if (typeof selector === 'function') {\n    return this.lift(new MulticastOperator(subjectFactory, selector));\n  }\n\n  const connectable: any = Object.create(this, connectableObservableDescriptor);\n  connectable.source = this;\n  connectable.subjectFactory = subjectFactory;\n\n  return <ConnectableObservable<T>> connectable;\n}\n\nexport type factoryOrValue<T> = T | (() => T);\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport class MulticastOperator<T> implements Operator<T, T> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { Subject } from '../Subject';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .publish().refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers\n * @method share\n * @owner Observable\n */\nexport function share<T>(this: Observable<T>): Observable<T> {\n  return multicast.call(this, shareSubjectFactory).refCount();\n};\n","\nimport { Observable } from '../../Observable';\nimport { share } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: typeof share;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} a predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} an Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return this.lift(new SingleOperator(predicate, this));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const predicate = this.predicate;\n    this.index++;\n    if (predicate) {\n      this.tryNext(value);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    try {\n      const result = this.predicate(value, this.index, this.source);\n      if (result) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { single } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: typeof single;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips `n` items emitted by an Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} the `n` of times, items emitted by source Observable should be skipped.\n * @return {Observable} an Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(this: Observable<T>, total: number): Observable<T> {\n  return this.lift(new SkipOperator(total));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skip } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: typeof skip;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} the second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} an Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: typeof skipUntil;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - a function to test each item emitted from the source Observable.\n * @return {Observable<T>} an Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: typeof skipWhile;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(this: Observable<T>, concurrent: number = Number.POSITIVE_INFINITY): T {\n  return <any>this.lift<any>(new MergeAllOperator<T>(concurrent));\n}\n\nexport class MergeAllOperator<T> implements Operator<Observable<T>, T> {\n  constructor(private concurrent: number) {\n  }\n\n  call(observer: Observer<T>, source: any): any {\n    return source.subscribe(new MergeAllSubscriber(observer, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeAllSubscriber<T> extends OuterSubscriber<Observable<T>, T> {\n  private hasCompleted: boolean = false;\n  private buffer: Observable<T>[] = [];\n  private active: number = 0;\n\n  constructor(destination: Observer<T>, private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(observable: Observable<T>) {\n    if (this.active < this.concurrent) {\n      this.active++;\n      this.add(subscribeToResult<Observable<T>, T>(this, observable));\n    } else {\n      this.buffer.push(observable);\n    }\n  }\n\n  protected _complete() {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler>): Observable<T>;\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  return this.lift.call(concatStatic<T, R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function concatStatic<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concatStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concatStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concatStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concatStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concatStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concatStatic<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concatStatic<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concatStatic<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  let scheduler: IScheduler = null;\n  let args = <any[]>observables;\n  if (isScheduler(args[observables.length - 1])) {\n    scheduler = args.pop();\n  }\n\n  if (scheduler === null && observables.length === 1) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new MergeAllOperator<R>(1));\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concatStatic } from './concat';\nimport { isScheduler } from '../util/isScheduler';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(this: Observable<T>, v1: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that emits the items in a specified Iterable before it begins to emit items emitted by the\n * source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {Values} an Iterable that contains the items you want the modified Observable to emit first.\n * @return {Observable} an Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T> {\n  let scheduler = <IScheduler>array[array.length - 1];\n  if (isScheduler(scheduler)) {\n    array.pop();\n  } else {\n    scheduler = null;\n  }\n\n  const len = array.length;\n  if (len === 1) {\n    return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), <Observable<T>>this);\n  } else if (len > 1) {\n    return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), <Observable<T>>this);\n  } else {\n    return concatStatic(new EmptyObservable<T>(scheduler), <Observable<T>>this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { startWith } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: typeof startWith;\n  }\n}","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Action } from '../scheduler/Action';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: IScheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(this: Action<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: IScheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} the IScheduler to perform subscription actions on.\n * @return {Observable<T>} the source Observable modified so that its subscriptions happen on the specified IScheduler\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return this.lift(new SubscribeOnOperator<T>(scheduler, delay));\n}\n\nclass SubscribeOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler,\n              private delay: number) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return new SubscribeOnObservable(\n      source, this.delay, this.scheduler\n    ).subscribe(subscriber);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { subscribeOn } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: typeof subscribeOn;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(this: Observable<T>): T {\n  return <any>this.lift<any>(new SwitchOperator());\n}\n\nclass SwitchOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.unsubscribeInner();\n    this.active++;\n    this.add(this.innerSubscription = subscribeToResult(this, value));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  private unsubscribeInner(): void {\n    this.active = this.active > 0 ? this.active - 1 : 0;\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n      this.remove(innerSubscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(): void {\n    this.unsubscribeInner();\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: typeof _switch;\n    _switch: typeof _switch;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<I | R> {\n  return this.lift(new SwitchMapOperator(project, resultSelector));\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: typeof switchMap;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function switchMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` every time a value is emitted on the source Observable.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<I | R> {\n  return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: typeof switchMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(this: Observable<T>, count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeOperator(count));\n  }\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { take } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: typeof take;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(this: Observable<T>, count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeLastOperator(count));\n  }\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { takeLast } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: typeof takeLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: typeof takeUntil;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: typeof takeWhile;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new ThrottleOperator(durationSelector));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.throttled) {\n      this.tryDurationSelector(value);\n    }\n  }\n\n  private tryDurationSelector(value: T): void {\n    let duration: SubscribableOrPromise<number> = null;\n    try {\n      duration = this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.emitAndThrottle(value, duration);\n  }\n\n  private emitAndThrottle(value: T, duration: SubscribableOrPromise<number>) {\n    this.add(this.throttled = subscribeToResult(this, duration));\n    this.destination.next(value);\n  }\n\n  protected _unsubscribe() {\n    const throttled = this.throttled;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttle } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: typeof throttle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(this: Observable<T>, duration: number, scheduler: IScheduler = async): Observable<T> {\n  return this.lift(new ThrottleTimeOperator(duration, scheduler));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      this.destination.next(value);\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: typeof throttleTime;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { timeInterval } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: typeof timeInterval;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\n\n/**\n * @param {number} due\n * @param {Scheduler} [scheduler]\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(this: Observable<T>,\n                           due: number | Date,\n                           scheduler: IScheduler = async): Observable<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.notifyTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, { subscriber: this, index: currentIndex });\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  notifyTimeout(): void {\n    this.error(this.errorInstance);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: typeof timeout;\n  }\n}","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): Observable<T | R>;\n/* tslint:disable:max-line-length */\n\n/**\n * @param due\n * @param withObservable\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): Observable<T | R> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private timeoutSubscription: Subscription = undefined;\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(public destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super();\n    destination.add(this);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.handleTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    const timeoutState = { subscriber: this, index: currentIndex };\n    this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T) {\n    this.destination.next(value);\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any) {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete() {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  handleTimeout(): void {\n    if (!this.closed) {\n      const withObservable = this.withObservable;\n      this.unsubscribe();\n      this.destination.add(this.timeoutSubscription = subscribeToResult(this, withObservable));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: typeof timeoutWith;\n  }\n}","import { Observable } from '../../Observable';\r\nimport { timestamp } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: typeof timestamp;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(this: Observable<T>): Observable<T[]> {\n  return this.lift(new ToArrayOperator());\n}\n\nclass ToArrayOperator<T> implements Operator<T, T[]> {\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new ToArraySubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ToArraySubscriber<T> extends Subscriber<T> {\n\n  private array: T[] = [];\n\n  constructor(destination: Subscriber<T[]>) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    this.array.push(x);\n  }\n\n  protected _complete() {\n    this.destination.next(this.array);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: typeof toArray;\n  }\n}","import { Observable } from '../Observable';\nimport { root } from '../util/root';\n\n/* tslint:disable:max-line-length */\nexport function toPromise<T>(this: Observable<T>): Promise<T>;\nexport function toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Converts an Observable sequence to a ES2015 compliant promise.\n *\n * @example\n * // Using normal ES2015\n * let source = Rx.Observable\n *   .just(42)\n *   .toPromise();\n *\n * source.then((value) => console.log('Value: %s', value));\n * // => Value: 42\n *\n * // Rejected Promise\n * // Using normal ES2015\n * let source = Rx.Observable\n *   .throw(new Error('woops'))\n *   .toPromise();\n *\n * source\n *   .then((value) => console.log('Value: %s', value))\n *   .catch((err) => console.log('Error: %s', err));\n * // => Error: Error: woops\n *\n * // Setting via the config\n * Rx.config.Promise = RSVP.Promise;\n *\n * let source = Rx.Observable\n *   .of(42)\n *   .toPromise();\n *\n * source.then((value) => console.log('Value: %s', value));\n * // => Value: 42\n *\n * // Setting via the method\n * let source = Rx.Observable\n *   .just(42)\n *   .toPromise(RSVP.Promise);\n *\n * source.then((value) => console.log('Value: %s', value));\n * // => Value: 42\n *\n * @param PromiseCtor promise The constructor of the promise. If not provided,\n * it will look for a constructor first in Rx.config.Promise then fall back to\n * the native Promise constructor if available.\n * @return {Promise<T>} An ES2015 compatible promise with the last value from\n * the observable sequence.\n * @method toPromise\n * @owner Observable\n */\nexport function toPromise<T>(this: Observable<T>, PromiseCtor?: typeof Promise): Promise<T> {\n  if (!PromiseCtor) {\n    if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n      PromiseCtor = root.Rx.config.Promise;\n    } else if (root.Promise) {\n      PromiseCtor = root.Promise;\n    }\n  }\n\n  if (!PromiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return new PromiseCtor((resolve, reject) => {\n    let value: any;\n    this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n  });\n}\n","\nimport { Observable } from '../../Observable';\nimport { toPromise } from '../../operator/toPromise';\n\nObservable.prototype.toPromise = toPromise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toPromise: typeof toPromise;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(this: Observable<T>, windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(windowBoundaries));\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { window } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: typeof window;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(this: Observable<T>, windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return this.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: typeof windowCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number = null,\n                              scheduler: IScheduler = async): Observable<Observable<T>> {\n  return this.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, scheduler));\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: Subject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: Subject<T>;\n  context: CloseWindowContext<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: Array<Subject<T>> = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): Subject<T> {\n    const window = new Subject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: Subject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: typeof windowTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(this: Observable<T>, openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: typeof windowToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(closingSelector));\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: typeof windowWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function withLatestFrom<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function withLatestFrom<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function withLatestFrom<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(this: Observable<T>, ...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  let project: any;\n  if (typeof args[args.length - 1] === 'function') {\n    project = args.pop();\n  }\n  const observables = <Observable<any>[]>args;\n  return this.lift(new WithLatestFromOperator(observables, project));\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: typeof withLatestFrom;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { zipProto } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: typeof zipProto;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArray } from './isArray';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { $$iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { $$observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      return result.subscribe(destination);\n    }\n  } else if (isArray(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[$$iterator] === 'function') {\n    const iterator = <any>result[$$iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[$$observable] === 'function') {\n    const obs = result[$$observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { $$iterator } from '../symbol/iterator';\n\n/* tslint:disable:max-line-length */\nexport function zipProto<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function zipProto<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipProto<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function zipProto<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipProto<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipProto<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipProto<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipProto<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipProto<T, R>(this: Observable<T>, array: Array<ObservableInput<T>>): Observable<R>;\nexport function zipProto<T, TOther, R>(this: Observable<T>, array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return this.lift.call(zipStatic<R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 7, name: 'Foo', isDev: true }\n * // { age: 5, name: 'Bar', isDev: true }\n * // { age: 9, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[$$iterator] === 'function') {\n      iterators.push(new StaticIterator(value[$$iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new ZipOperator(project));\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipAll } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: typeof zipAll;\n  }\n}","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\n\n/**\n * @see {@link Notification}\n *\n * @param scheduler\n * @param delay\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return this.lift(new ObserveOnOperator(scheduler, delay));\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operator/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return this.lift(new RefCountOperator<T>(this));\n  }\n}\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subscribe: { value: (<any> ConnectableObservable.prototype)._subscribe },\n  getSubject: { value: (<any> ConnectableObservable.prototype).getSubject },\n  connect: { value: (<any> ConnectableObservable.prototype).connect },\n  refCount: { value: (<any> ConnectableObservable.prototype).refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const { connectable } = this;\n    if (connectable) {\n      this.connectable = null;\n      const connection = (<any> connectable)._connection;\n      (<any> connectable)._refCount = 0;\n      (<any> connectable)._subject = null;\n      (<any> connectable)._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<TimeInterval<T>> {\n  return this.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<Timestamp<T>> {\n  return this.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n};\n\nclass TimestampOperator<T> implements Operator<T, Timestamp<T>> {\n  constructor(private scheduler: IScheduler) {\n  }\n\n  call(observer: Subscriber<Timestamp<T>>, source: any): any {\n    return source.subscribe(new TimestampSubscriber(observer, this.scheduler));\n  }\n}\n\nclass TimestampSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Timestamp<T>>, private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const now = this.scheduler.now();\n\n    this.destination.next(new Timestamp(value, now));\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return this.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return this.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (this: ColdObservable<T>, subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { $$rxSubscriber } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [$$rxSubscriber]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<T> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): ColdObservable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): HotObservable<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: VirtualAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { $$rxSubscriber } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[$$rxSubscriber]) {\n      return nextOrObserver[$$rxSubscriber]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { $$observable } from './symbol/observable';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is  called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  /**\n   * Registers handlers for handling emitted values, error and completions from the observable, and\n   *  executes the observable's subscriber function, which will take action to set up the underlying data stream\n   * @method subscribe\n   * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the observable.\n   * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled\n   * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   */\n  subscribe(): Subscription;\n  subscribe(observer: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      const subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [$$observable]() {\n    return this;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { $$rxSubscriber } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [$$rxSubscriber]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      context = observerOrNext;\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (isFunction(context.unsubscribe)) {\n        this.add(<() => void> context.unsubscribe.bind(context));\n      }\n      context.unsubscribe = this.unsubscribe.bind(this);\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._complete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._complete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(this: Observable<T>, project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  if (typeof project !== 'function') {\n    throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n  }\n  return this.lift(new MapOperator(project, thisArg));\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { MapOperator } from '../../operator/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(this: AjaxRequest): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    const xhr = new root.XMLHttpRequest();\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = !!this.withCredentials;\n    }\n    return xhr;\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T>(url: string, headers?: Object): Observable<T>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, responseType: 'json', headers })\n    .lift<T>(new MapOperator<AjaxResponse, T>((x: AjaxResponse, index: number): T => x.response, null));\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function(this: AjaxRequest) {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // set up the events before open XHR\n      // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n      // You need to add the event listeners before calling open() on the request.\n      // Otherwise the progress events will not fire.\n      this.setupEvents(xhr, request);\n      // open XHR\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout and responseType can be set once the XHR is open\n      xhr.timeout = request.timeout;\n      xhr.responseType = request.responseType;\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // finally send the request\n      result = body ? tryCatch(xhr.send).call(xhr, body) : tryCatch(xhr.send).call(xhr);\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURI(key)}=${encodeURI(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    function xhrTimeout(this: XMLHttpRequest, e: ProgressEvent) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    xhr.ontimeout = xhrTimeout;\n    (<any>xhrTimeout).request = request;\n    (<any>xhrTimeout).subscriber = this;\n    (<any>xhrTimeout).progressSubscriber = progressSubscriber;\n    if (xhr.upload && 'withCredentials' in xhr) {\n      if (progressSubscriber) {\n        let xhrProgress: (e: ProgressEvent) => void;\n        xhrProgress = function(e: ProgressEvent) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        if (root.XDomainRequest) {\n          xhr.onprogress = xhrProgress;\n        } else {\n          xhr.upload.onprogress = xhrProgress;\n        }\n        (<any>xhrProgress).progressSubscriber = progressSubscriber;\n      }\n      let xhrError: (e: ErrorEvent) => void;\n      xhrError = function(this: XMLHttpRequest, e: ErrorEvent) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      xhr.onerror = xhrError;\n      (<any>xhrError).request = request;\n      (<any>xhrError).subscriber = this;\n      (<any>xhrError).progressSubscriber = progressSubscriber;\n    }\n\n    function xhrReadyStateChange(this: XMLHttpRequest, e: ProgressEvent) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    xhr.onreadystatechange = xhrReadyStateChange;\n    (<any>xhrReadyStateChange).subscriber = this;\n    (<any>xhrReadyStateChange).progressSubscriber = progressSubscriber;\n    (<any>xhrReadyStateChange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n\n    switch (this.responseType) {\n      case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          this.response = JSON.parse(xhr.responseText || 'null');\n        }\n        break;\n      case 'xml':\n        this.response = xhr.responseXML;\n        break;\n      case 'text':\n      default:\n        this.response = ('response' in xhr) ? xhr.response : xhr.responseText;\n        break;\n    }\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: AsapAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\nexport const queue = new QueueScheduler(QueueAction);\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.delay = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n  }\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: AnimationFrameAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const $$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const $$iterator = symbolIteratorPonyfill(root);","declare let global: NodeJS.Global;\n\ndeclare module NodeJS {\n  interface Global {\n    window: any;\n    global: any;\n  }\n}\n\n/**\n * window: browser in DOM main thread\n * self: browser in WebWorker\n * global: Node.js/other\n */\nexport const root: any = (\n     typeof window == 'object' && window.window === window && window\n  || typeof self == 'object' && self.self === self && self\n  || typeof global == 'object' && global.global === global && global\n);\n\nif (!root) {\n  throw new Error('RxJS could not find any global context (window, self, global)');\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const $$observable = getSymbolObservable(root);","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject, AnonymousSubject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/repeatWhen';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/sequenceEqual';\nimport './add/operator/share';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {TimeoutError} from './util/TimeoutError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operator/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\n\nimport { asap } from './scheduler/asap';\nimport { async } from './scheduler/async';\nimport { queue } from './scheduler/queue';\nimport { animationFrame } from './scheduler/animationFrame';\nimport { AsapScheduler } from './scheduler/AsapScheduler';\nimport { AsyncScheduler } from './scheduler/AsyncScheduler';\nimport { QueueScheduler } from './scheduler/QueueScheduler';\nimport { AnimationFrameScheduler } from './scheduler/AnimationFrameScheduler';\nimport { $$rxSubscriber as rxSubscriber } from './symbol/rxSubscriber';\nimport { $$iterator as iterator } from './symbol/iterator';\nimport { $$observable as observable } from './symbol/observable';\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n"]}